<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd">

    <context:annotation-config/>

    <!-- Scans within the base package of the application for @Components
        to configure as beans -->
    <context:component-scan base-package="eionet.gdem" />

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="transactionAwareDataSource"></property>
    </bean>

    <bean id="namedParameterJdbcTemplate" class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
        <constructor-arg ref="transactionAwareDataSource"/>
    </bean>

    <bean id="transactionManager" primary="true" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <bean id="springApplicationContext" class="eionet.gdem.SpringApplicationContext"/>

    <!--primary="true" -->
    <bean name="dataSource" class="org.springframework.jdbc.datasource.SingleConnectionDataSource">
        <property name="driverClassName" value="${test.db.driver}" />
        <property name="username" value="${test.db.user}" />
        <property name="password" value="${test.db.password}" />
        <property name="url" value="${test.db.jdbcurl}" />
        <property name="suppressClose" value="true" />
    </bean>

    <bean name="databaseTester" class="org.dbunit.DataSourceDatabaseTester">
        <constructor-arg ref="transactionAwareDataSource" />
    </bean>

    <!-- Runs on Tomcat startup. -->
    <bean id="liquibase" class="liquibase.integration.spring.SpringLiquibase">
        <property name="dataSource" ref="transactionAwareDataSource" />
        <property name="changeLog" value="classpath:db/xmlconv-struct.xml" />
    </bean>

    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"/>

    <!-- TESTING JOOQ LIBRARY - REMOVE ALL FOLLOWING STATEMENTS IF WE WONT NEED JOOQ -->

    <bean id="transactionAwareDataSource" primary="true"
          class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy">
        <constructor-arg ref="dataSource" />
    </bean>

    <bean class="org.jooq.impl.DataSourceConnectionProvider" name="connectionProvider">
        <constructor-arg ref="transactionAwareDataSource" />
    </bean>

    <!-- Configure the DSL object, optionally overriding jOOQ Exceptions with Spring Exceptions -->
    <bean id="dsl" class="org.jooq.impl.DefaultDSLContext">
        <constructor-arg ref="config" />
    </bean>

    <!--<bean id="exceptionTranslator" class="org.jooq.example.spring.exception.ExceptionTranslator" />-->

    <!-- Invoking an internal, package-private constructor for the example
         Implement your own Configuration for more reliable behaviour -->
    <bean class="org.jooq.impl.DefaultConfiguration" name="config">
        <property name="SQLDialect"><value type="org.jooq.SQLDialect">MYSQL</value></property>
        <property name="connectionProvider" ref="connectionProvider" />
        <!--<property name="executeListenerProvider">
            <array>
                <bean class="org.jooq.impl.DefaultExecuteListenerProvider">
                    <constructor-arg index="0" ref="exceptionTranslator"/>
                </bean>
            </array>
        </property>-->
    </bean>

<!--    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="packagesToScan" value="eionet.gdem" />
        <property name="persistenceUnitName" value="CRM" />
        <property name="jpaVendorAdapter" ref="jpaVendorAdapter" />
        <property name="jpaProperties">
            <props>
                &lt;!&ndash; TODO: Helper for database - migrate to liquibase before deploying to production &ndash;&gt;
                &lt;!&ndash;<prop key="hibernate.hbm2ddl.auto">update</prop>&ndash;&gt;
            </props>
        </property>
        &lt;!&ndash;<property name="loadTimeWeaver">
            <bean class="org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver"/>
        </property>&ndash;&gt;
    </bean>
    <bean id="jpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" >
        <property name="showSql" value="true"/>
        <property name="generateDdl" value="false" />
        <property name="databasePlatform" value="org.hibernate.dialect.MySQL5InnoDBDialect" />
    </bean>

    <bean id="transactionManager" primary="true" class="org.springframework.orm.jpa.JpaTransactionManager" >
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
        &lt;!&ndash;<property name="dataSource" ref="dataSource"/>&ndash;&gt;
    </bean>-->

    <tx:annotation-driven transaction-manager="transactionManager" />

</beans>
